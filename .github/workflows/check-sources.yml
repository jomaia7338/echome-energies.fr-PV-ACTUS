name: Check Newsletter Sources

on:
  workflow_dispatch: {}
  schedule:
    - cron: "0 6 * * 1"   # Tous les lundis 06:00 UTC (08:00 Paris)

jobs:
  linkcheck:
    runs-on: ubuntu-latest
    permissions:
      contents: write      # pour pousser les rapports dans le repo (branche par défaut)
      issues: write        # si on veut créer/mettre à jour une issue
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Prépare répertoires
        run: mkdir -p reports

      - name: Lancer la vérification (Node natif)
        run: node scripts/check-sources.mjs
        env:
          SOURCES_JSON: data/outils_newsletters_pv.json
          OUT_JSON: reports/url_status.json
          OUT_CSV: reports/url_status.csv
          TIMEOUT_MS: 15000
          CONCURRENCY: 8

      - name: Publier les rapports comme artefacts
        uses: actions/upload-artifact@v4
        with:
          name: url-check-reports
          path: reports/

      - name: Commit des rapports dans le repo
        run: |
          set -e
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git add reports/url_status.json reports/url_status.csv reports/summary.md || true
          if git diff --cached --quiet; then
            echo "Aucun changement à committer."
          else
            git commit -m "chore(linkcheck): mise à jour rapports liens newsletters"
            git push
          fi

      # Optionnel : créer/mettre à jour une issue avec les KO
      - name: Ouvrir/mettre à jour une issue récap (KO)
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = 'reports/summary.md';
            if (!fs.existsSync(path)) {
              core.info('Pas de summary.md, on ignore.');
              return;
            }
            const body = fs.readFileSync(path, 'utf-8');
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              labels: 'linkcheck'
            });
            const title = 'État des liens — Newsletters PV';
            const found = issues.find(i => i.title === title);
            if (found) {
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: found.number,
                body
              });
            } else {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title,
                body,
                labels: ['linkcheck']
              });
            }
